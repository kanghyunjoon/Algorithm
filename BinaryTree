public class BinaryTree {
    
    private Node root;
    
    private class Node {
        int data;
        Node left;
        Node right;
        Node(int data) {
            this.data = data;
            left = null;
            right = null;
        }
    }
    
    public void insert(int data) {
        root = insert(root, data);
    }
    
    private Node insert(Node node, int data) {
        if (node == null) {
            node = new Node(data);
        } else {
            if (data <= node.data) {
                node.left = insert(node.left, data);
            } else {
                node.right = insert(node.right, data);
            }
        }
        return node;
    }
    
    public boolean search(int data) {
        return search(root, data);
    }
    
    private boolean search(Node node, int data) {
        if (node == null) {
            return false;
        } else if (node.data == data) {
            return true;
        } else if (data < node.data) {
            return search(node.left, data);
        } else {
            return search(node.right, data);
        }
    }
    
    public void delete(int data) {
        root = delete(root, data);
    }
    
    private Node delete(Node node, int data) {
        if (node == null) {
            return null;
        }
        if (data < node.data) {
            node.left = delete(node.left, data);
        } else if (data > node.data) {
            node.right = delete(node.right, data);
        } else {
            if (node.left == null) {
                return node.right;
            } else if (node.right == null) {
                return node.left;
            }
            node.data = minValue(node.right);
            node.right = delete(node.right, node.data);
        }
        return node;
    }
    
    private int minValue(Node node) {
        int minValue = node.data;
        while (node.left != null) {
            minValue = node.left.data;
            node = node.left;
        }
        return minValue;
    }
    
    public void print() {
        print(root);
    }
    
    private void print(Node node) {
        if (node == null) {
            return;
        }
        print(node.left);
        System.out.print(node.data + " ");
        print(node.right);
    }
    
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        int[] arr = {13, 5, 1, 19, 17, 10, 6, 14, 8, 12, 16, 11, 4, 2, 15, 7, 3, 20, 18, 9};
        for (int i = 0; i < arr.length; i++) {
            tree.insert(arr[i]);
        }
        System.out.println("정렬된 트리:");
        tree.print();
        System.out.println();
        int searchKey = 7;
        if (tree.search(searchKey)) {
            System.out.println(searchKey + " 검색");
        } else {
            System.out.println(searchKey + " 검색 실패");
        }
        int deleteKey = 5;
        tree.delete(deleteKey);
        System.out.println("삭제할 노드 " + deleteKey + ":");
        tree.print();
    }
}
